// Arduino Robot Hardware Test Code
// Tests all motors, servo, and ultrasonic sensor using exact same pins
// Upload this code to systematically test all components

#include <Servo.h>

// Servo and Ultrasonic pins (EXACT SAME AS YOUR WORKING CODE)
#define SERVO_PIN 10
#define TRIG_PIN 3
#define ECHO_PIN 11
Servo myServo;

// Motor pins (EXACT SAME AS YOUR WORKING CODE)
#define ENA 5    // PWM speed control for right motor
#define ENB 6    // PWM speed control for left motor
#define IN1 2    // Right motor direction control
#define IN2 4
#define IN3 7    // Left motor direction control
#define IN4 8

// Test speeds
#define TEST_SPEED 180
#define SLOW_SPEED 120

void setup() {
  Serial.begin(9600);
  Serial.println("========================================");
  Serial.println("ROBOT HARDWARE TEST STARTING...");
  Serial.println("========================================");
  
  // Initialize motor pins
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  
  // Initialize ultrasonic pins
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  
  // Initialize servo
  myServo.attach(SERVO_PIN);
  myServo.write(90); // Center position
  
  // Stop motors initially
  stopAllMotors();
  
  delay(2000); // Give time to read serial monitor
  
  // Start comprehensive testing
  runCompleteTest();
}

void loop() {
  // Test runs once in setup, then just monitor distance
  static unsigned long lastDistanceCheck = 0;
  if (millis() - lastDistanceCheck > 1000) {
    Serial.println("--- Continuous Distance Monitoring ---");
    measureAndDisplayDistance();
    lastDistanceCheck = millis();
  }
}

void runCompleteTest() {
  Serial.println("\n1. TESTING SERVO MOVEMENT...");
  testServo();
  
  Serial.println("\n2. TESTING ULTRASONIC SENSOR...");
  testUltrasonicSensor();
  
  Serial.println("\n3. TESTING RIGHT MOTOR...");
  testRightMotor();
  
  Serial.println("\n4. TESTING LEFT MOTOR...");
  testLeftMotor();
  
  Serial.println("\n5. TESTING BOTH MOTORS FORWARD...");
  testBothMotorsForward();
  
  Serial.println("\n6. TESTING BOTH MOTORS BACKWARD...");
  testBothMotorsBackward();
  
  Serial.println("\n7. TESTING ROTATION LEFT...");
  testRotateLeft();
  
  Serial.println("\n8. TESTING ROTATION RIGHT...");
  testRotateRight();
  
  Serial.println("\n9. TESTING SERVO WITH DISTANCE MEASUREMENT...");
  testServoWithDistance();
  
  Serial.println("\n========================================");
  Serial.println("HARDWARE TEST COMPLETE!");
  Serial.println("All tests finished. Check results above.");
  Serial.println("========================================");
}

void testServo() {
  Serial.println("Moving servo to different positions...");
  
  // Test center
  Serial.print("Moving to CENTER (90°)... ");
  myServo.write(90);
  delay(1000);
  Serial.println("DONE");
  
  // Test left
  Serial.print("Moving to LEFT (30°)... ");
  myServo.write(30);
  delay(1000);
  Serial.println("DONE");
  
  // Test right
  Serial.print("Moving to RIGHT (150°)... ");
  myServo.write(150);
  delay(1000);
  Serial.println("DONE");
  
  // Test sweep
  Serial.println("Performing sweep test...");
  for (int pos = 30; pos <= 150; pos += 10) {
    myServo.write(pos);
    Serial.print("Position: ");
    Serial.print(pos);
    Serial.println("°");
    delay(200);
  }
  
  // Return to center
  myServo.write(90);
  Serial.println("Servo returned to center.");
}

void testUltrasonicSensor() {
  Serial.println("Testing ultrasonic sensor (5 readings)...");
  
  for (int i = 1; i <= 5; i++) {
    Serial.print("Reading ");
    Serial.print(i);
    Serial.print(": ");
    
    long distance = measureDistance();
    
    if (distance > 0 && distance < 400) {
      Serial.print(distance);
      Serial.println(" cm - GOOD");
    } else {
      Serial.println("OUT OF RANGE or ERROR");
    }
    
    delay(500);
  }
}

void testRightMotor() {
  Serial.println("Testing RIGHT motor only...");
  
  // Forward
  Serial.print("Right motor FORWARD... ");
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, TEST_SPEED);
  delay(2000);
  stopAllMotors();
  Serial.println("STOPPED");
  delay(1000);
  
  // Backward
  Serial.print("Right motor BACKWARD... ");
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(ENA, TEST_SPEED);
  delay(2000);
  stopAllMotors();
  Serial.println("STOPPED");
}

void testLeftMotor() {
  Serial.println("Testing LEFT motor only...");
  
  // Forward
  Serial.print("Left motor FORWARD... ");
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, TEST_SPEED);
  delay(2000);
  stopAllMotors();
  Serial.println("STOPPED");
  delay(1000);
  
  // Backward
  Serial.print("Left motor BACKWARD... ");
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENB, TEST_SPEED);
  delay(2000);
  stopAllMotors();
  Serial.println("STOPPED");
}

void testBothMotorsForward() {
  Serial.print("Both motors FORWARD... ");
  
  // Right motor forward
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, TEST_SPEED);
  
  // Left motor forward
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, TEST_SPEED);
  
  delay(3000);
  stopAllMotors();
  Serial.println("STOPPED");
}

void testBothMotorsBackward() {
  Serial.print("Both motors BACKWARD... ");
  
  // Right motor backward
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(ENA, TEST_SPEED);
  
  // Left motor backward
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENB, TEST_SPEED);
  
  delay(3000);
  stopAllMotors();
  Serial.println("STOPPED");
}

void testRotateLeft() {
  Serial.print("ROTATING LEFT... ");
  
  // Right motor forward, left motor backward
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, TEST_SPEED);
  
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENB, TEST_SPEED);
  
  delay(2000);
  stopAllMotors();
  Serial.println("STOPPED");
}

void testRotateRight() {
  Serial.print("ROTATING RIGHT... ");
  
  // Right motor backward, left motor forward
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  analogWrite(ENA, TEST_SPEED);
  
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, TEST_SPEED);
  
  delay(2000);
  stopAllMotors();
  Serial.println("STOPPED");
}

void testServoWithDistance() {
  Serial.println("Testing servo positions with distance measurement...");
  
  int positions[] = {30, 60, 90, 120, 150};
  String labels[] = {"LEFT", "LEFT-CENTER", "CENTER", "RIGHT-CENTER", "RIGHT"};
  
  for (int i = 0; i < 5; i++) {
    Serial.print("Moving to ");
    Serial.print(labels[i]);
    Serial.print(" (");
    Serial.print(positions[i]);
    Serial.print("°)... ");
    
    myServo.write(positions[i]);
    delay(500); // Let servo reach position
    
    long distance = measureDistance();
    Serial.print("Distance: ");
    
    if (distance > 0 && distance < 400) {
      Serial.print(distance);
      Serial.println(" cm");
    } else {
      Serial.println("OUT OF RANGE");
    }
    
    delay(1000);
  }
  
  // Return to center
  myServo.write(90);
}

long measureDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  
  long duration = pulseIn(ECHO_PIN, HIGH, 30000); // 30ms timeout
  long distance = duration * 0.034 / 2;
  
  return distance;
}

void measureAndDisplayDistance() {
  long distance = measureDistance();
  
  Serial.print("Current distance: ");
  if (distance > 0 && distance < 400) {
    Serial.print(distance);
    Serial.print(" cm at servo position ");
    Serial.print("90°");
  } else {
    Serial.print("OUT OF RANGE");
  }
  Serial.println();
}

void stopAllMotors() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
}