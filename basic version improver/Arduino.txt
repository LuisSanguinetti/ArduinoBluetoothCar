// Arduino Direct Motor Control Protocol
// Receives: "L:speed,R:speed\n" where speed is -255 to 255
// Perfect for AI control or any advanced control system

#include <Servo.h>

// Pin definitions (from your original code)
#define SERVO_PIN 10
#define TRIG_PIN 3
#define ECHO_PIN 11

// Motor pins
#define ENA 5    // Right motor PWM
#define ENB 6    // Left motor PWM
#define IN1 2    // Right motor direction
#define IN2 4    
#define IN3 7    // Left motor direction
#define IN4 8

// Objects
Servo myServo;

// Variables
String inputBuffer = "";
int leftMotorSpeed = 0;
int rightMotorSpeed = 0;
int servoPosition = 90;
unsigned long lastCommandTime = 0;
unsigned long lastStatusTime = 0;
const unsigned long TIMEOUT = 500;  // Stop if no command for 500ms
const unsigned long STATUS_INTERVAL = 100;  // Send status every 100ms

void setup() {
  Serial.begin(115200);  // Faster baud rate for lower latency
  
  // Initialize motor pins
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  
  // Initialize sensor pins
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  
  // Initialize servo
  myServo.attach(SERVO_PIN);
  myServo.write(90);
  
  // Stop motors
  setMotors(0, 0);
  
  Serial.println("READY");
  Serial.println("Protocol: L:speed,R:speed (speed from -255 to 255)");
}

void loop() {
  // Read serial data
  while (Serial.available() > 0) {
    char c = Serial.read();
    
    if (c == '\n') {
      processCommand(inputBuffer);
      inputBuffer = "";
      lastCommandTime = millis();
    } else if (c != '\r') {  // Ignore carriage return
      inputBuffer += c;
    }
  }
  
  // Safety: stop if no command received
  if (millis() - lastCommandTime > TIMEOUT) {
    if (leftMotorSpeed != 0 || rightMotorSpeed != 0) {
      setMotors(0, 0);
      Serial.println("TIMEOUT_STOP");
    }
  }
  
  // Send periodic status
  if (millis() - lastStatusTime > STATUS_INTERVAL) {
    sendStatus();
    lastStatusTime = millis();
  }
}

void processCommand(String cmd) {
  cmd.trim();
  if (cmd.length() == 0) return;
  
  // Parse motor command: "L:speed,R:speed"
  if (cmd.startsWith("L:") && cmd.indexOf(",R:") > 0) {
    int commaPos = cmd.indexOf(",R:");
    String leftStr = cmd.substring(2, commaPos);
    String rightStr = cmd.substring(commaPos + 3);
    
    int leftSpeed = leftStr.toInt();
    int rightSpeed = rightStr.toInt();
    
    setMotors(leftSpeed, rightSpeed);
  }
  // Servo command: "S:angle"
  else if (cmd.startsWith("S:")) {
    int angle = cmd.substring(2).toInt();
    setServo(angle);
  }
  // Get distance: "D"
  else if (cmd == "D") {
    sendDistance();
  }
  // Emergency stop: "STOP"
  else if (cmd == "STOP") {
    setMotors(0, 0);
    Serial.println("EMERGENCY_STOP");
  }
  // Get full status: "STATUS"
  else if (cmd == "STATUS") {
    sendFullStatus();
  }
}

void setMotors(int leftSpeed, int rightSpeed) {
  // Constrain speeds
  leftSpeed = constrain(leftSpeed, -255, 255);
  rightSpeed = constrain(rightSpeed, -255, 255);
  
  // Store speeds
  leftMotorSpeed = leftSpeed;
  rightMotorSpeed = rightSpeed;
  
  // Control left motor (ENB, IN3, IN4)
  if (leftSpeed > 0) {
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    analogWrite(ENB, abs(leftSpeed));
  } else if (leftSpeed < 0) {
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    analogWrite(ENB, abs(leftSpeed));
  } else {
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, LOW);
    analogWrite(ENB, 0);
  }
  
  // Control right motor (ENA, IN1, IN2)
  if (rightSpeed > 0) {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, abs(rightSpeed));
  } else if (rightSpeed < 0) {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    analogWrite(ENA, abs(rightSpeed));
  } else {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, 0);
  }
  
  // Send confirmation
  Serial.print("MOTORS:");
  Serial.print(leftSpeed);
  Serial.print(",");
  Serial.println(rightSpeed);
}

void setServo(int angle) {
  angle = constrain(angle, 0, 180);
  servoPosition = angle;
  myServo.write(angle);
  
  Serial.print("SERVO:");
  Serial.println(angle);
}

long measureDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  
  long duration = pulseIn(ECHO_PIN, HIGH, 30000);
  long distance = duration * 0.034 / 2;
  
  if (distance == 0) distance = 999;  // No echo = max distance
  
  return distance;
}

void sendDistance() {
  long dist = measureDistance();
  Serial.print("DIST:");
  Serial.println(dist);
}

void sendStatus() {
  // Compact status message for regular updates
  Serial.print("ST:");
  Serial.print(leftMotorSpeed);
  Serial.print(",");
  Serial.print(rightMotorSpeed);
  Serial.print(",");
  Serial.print(servoPosition);
  Serial.print(",");
  Serial.println(measureDistance());
}

void sendFullStatus() {
  Serial.println("=== FULL STATUS ===");
  Serial.print("LEFT_MOTOR:");
  Serial.println(leftMotorSpeed);
  Serial.print("RIGHT_MOTOR:");
  Serial.println(rightMotorSpeed);
  Serial.print("SERVO:");
  Serial.println(servoPosition);
  Serial.print("DISTANCE:");
  Serial.println(measureDistance());
  Serial.println("==================");
}